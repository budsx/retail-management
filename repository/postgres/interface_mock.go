// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package postgres is a generated GoMock package.
package postgres

import (
	context "context"
	reflect "reflect"

	model "github.com/budsx/retail-management/model"
	gomock "github.com/golang/mock/gomock"
)

// MockPostgresRepository is a mock of PostgresRepository interface.
type MockPostgresRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPostgresRepositoryMockRecorder
}

// MockPostgresRepositoryMockRecorder is the mock recorder for MockPostgresRepository.
type MockPostgresRepositoryMockRecorder struct {
	mock *MockPostgresRepository
}

// NewMockPostgresRepository creates a new mock instance.
func NewMockPostgresRepository(ctrl *gomock.Controller) *MockPostgresRepository {
	mock := &MockPostgresRepository{ctrl: ctrl}
	mock.recorder = &MockPostgresRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostgresRepository) EXPECT() *MockPostgresRepositoryMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockPostgresRepository) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockPostgresRepositoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPostgresRepository)(nil).Close))
}

// CreateStockTransaction mocks base method.
func (m *MockPostgresRepository) CreateStockTransaction(arg0 context.Context, arg1 model.StockTransaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStockTransaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStockTransaction indicates an expected call of CreateStockTransaction.
func (mr *MockPostgresRepositoryMockRecorder) CreateStockTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStockTransaction", reflect.TypeOf((*MockPostgresRepository)(nil).CreateStockTransaction), arg0, arg1)
}

// DeleteLocationByUserID mocks base method.
func (m *MockPostgresRepository) DeleteLocationByUserID(ctx context.Context, userID, locationID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLocationByUserID", ctx, userID, locationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLocationByUserID indicates an expected call of DeleteLocationByUserID.
func (mr *MockPostgresRepositoryMockRecorder) DeleteLocationByUserID(ctx, userID, locationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLocationByUserID", reflect.TypeOf((*MockPostgresRepository)(nil).DeleteLocationByUserID), ctx, userID, locationID)
}

// GetStockTransactionByID mocks base method.
func (m *MockPostgresRepository) GetStockTransactionByID(ctx context.Context, transactionID int64) (model.StockTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockTransactionByID", ctx, transactionID)
	ret0, _ := ret[0].(model.StockTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockTransactionByID indicates an expected call of GetStockTransactionByID.
func (mr *MockPostgresRepositoryMockRecorder) GetStockTransactionByID(ctx, transactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockTransactionByID", reflect.TypeOf((*MockPostgresRepository)(nil).GetStockTransactionByID), ctx, transactionID)
}

// GetStockTransactions mocks base method.
func (m *MockPostgresRepository) GetStockTransactions(arg0 context.Context, arg1 int64) ([]model.StockTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockTransactions", arg0, arg1)
	ret0, _ := ret[0].([]model.StockTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockTransactions indicates an expected call of GetStockTransactions.
func (mr *MockPostgresRepositoryMockRecorder) GetStockTransactions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockTransactions", reflect.TypeOf((*MockPostgresRepository)(nil).GetStockTransactions), arg0, arg1)
}

// GetTotalStockByLocation mocks base method.
func (m *MockPostgresRepository) GetTotalStockByLocation(arg0 context.Context, arg1 int64) ([]model.ProductStock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalStockByLocation", arg0, arg1)
	ret0, _ := ret[0].([]model.ProductStock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalStockByLocation indicates an expected call of GetTotalStockByLocation.
func (mr *MockPostgresRepositoryMockRecorder) GetTotalStockByLocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalStockByLocation", reflect.TypeOf((*MockPostgresRepository)(nil).GetTotalStockByLocation), arg0, arg1)
}

// GetTotalStockByProductAndWarehouse mocks base method.
func (m *MockPostgresRepository) GetTotalStockByProductAndWarehouse(arg0 context.Context, arg1, arg2 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalStockByProductAndWarehouse", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalStockByProductAndWarehouse indicates an expected call of GetTotalStockByProductAndWarehouse.
func (mr *MockPostgresRepositoryMockRecorder) GetTotalStockByProductAndWarehouse(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalStockByProductAndWarehouse", reflect.TypeOf((*MockPostgresRepository)(nil).GetTotalStockByProductAndWarehouse), arg0, arg1, arg2)
}

// GetTotalStocks mocks base method.
func (m *MockPostgresRepository) GetTotalStocks(ctx context.Context) ([]model.ProductStock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalStocks", ctx)
	ret0, _ := ret[0].([]model.ProductStock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalStocks indicates an expected call of GetTotalStocks.
func (mr *MockPostgresRepositoryMockRecorder) GetTotalStocks(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalStocks", reflect.TypeOf((*MockPostgresRepository)(nil).GetTotalStocks), ctx)
}

// GetUserByUsername mocks base method.
func (m *MockPostgresRepository) GetUserByUsername(ctx context.Context, username string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, username)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockPostgresRepositoryMockRecorder) GetUserByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockPostgresRepository)(nil).GetUserByUsername), ctx, username)
}

// ReadLocationByID mocks base method.
func (m *MockPostgresRepository) ReadLocationByID(ctx context.Context, locationID int64) (model.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadLocationByID", ctx, locationID)
	ret0, _ := ret[0].(model.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadLocationByID indicates an expected call of ReadLocationByID.
func (mr *MockPostgresRepositoryMockRecorder) ReadLocationByID(ctx, locationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLocationByID", reflect.TypeOf((*MockPostgresRepository)(nil).ReadLocationByID), ctx, locationID)
}

// ReadProductByID mocks base method.
func (m *MockPostgresRepository) ReadProductByID(arg0 context.Context, arg1 int64) (model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadProductByID", arg0, arg1)
	ret0, _ := ret[0].(model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadProductByID indicates an expected call of ReadProductByID.
func (mr *MockPostgresRepositoryMockRecorder) ReadProductByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadProductByID", reflect.TypeOf((*MockPostgresRepository)(nil).ReadProductByID), arg0, arg1)
}

// ReadProductsWithPagination mocks base method.
func (m *MockPostgresRepository) ReadProductsWithPagination(arg0 context.Context, arg1, arg2 int32) ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadProductsWithPagination", arg0, arg1, arg2)
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadProductsWithPagination indicates an expected call of ReadProductsWithPagination.
func (mr *MockPostgresRepositoryMockRecorder) ReadProductsWithPagination(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadProductsWithPagination", reflect.TypeOf((*MockPostgresRepository)(nil).ReadProductsWithPagination), arg0, arg1, arg2)
}

// ReadWarehouseByID mocks base method.
func (m *MockPostgresRepository) ReadWarehouseByID(ctx context.Context, warehouseID int64) (model.Warehouse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadWarehouseByID", ctx, warehouseID)
	ret0, _ := ret[0].(model.Warehouse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadWarehouseByID indicates an expected call of ReadWarehouseByID.
func (mr *MockPostgresRepositoryMockRecorder) ReadWarehouseByID(ctx, warehouseID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadWarehouseByID", reflect.TypeOf((*MockPostgresRepository)(nil).ReadWarehouseByID), ctx, warehouseID)
}

// ReadWarehousesByUserID mocks base method.
func (m *MockPostgresRepository) ReadWarehousesByUserID(ctx context.Context, userID int64) ([]model.Warehouse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadWarehousesByUserID", ctx, userID)
	ret0, _ := ret[0].([]model.Warehouse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadWarehousesByUserID indicates an expected call of ReadWarehousesByUserID.
func (mr *MockPostgresRepositoryMockRecorder) ReadWarehousesByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadWarehousesByUserID", reflect.TypeOf((*MockPostgresRepository)(nil).ReadWarehousesByUserID), ctx, userID)
}

// RegisterUser mocks base method.
func (m *MockPostgresRepository) RegisterUser(arg0 context.Context, arg1 model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockPostgresRepositoryMockRecorder) RegisterUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockPostgresRepository)(nil).RegisterUser), arg0, arg1)
}

// UpdateLocation mocks base method.
func (m *MockPostgresRepository) UpdateLocation(ctx context.Context, location model.Location) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLocation", ctx, location)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLocation indicates an expected call of UpdateLocation.
func (mr *MockPostgresRepositoryMockRecorder) UpdateLocation(ctx, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLocation", reflect.TypeOf((*MockPostgresRepository)(nil).UpdateLocation), ctx, location)
}

// UpdateProductByID mocks base method.
func (m *MockPostgresRepository) UpdateProductByID(arg0 context.Context, arg1 model.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProductByID indicates an expected call of UpdateProductByID.
func (mr *MockPostgresRepositoryMockRecorder) UpdateProductByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductByID", reflect.TypeOf((*MockPostgresRepository)(nil).UpdateProductByID), arg0, arg1)
}

// UpdateWarehouse mocks base method.
func (m *MockPostgresRepository) UpdateWarehouse(ctx context.Context, warehouse model.Warehouse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWarehouse", ctx, warehouse)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWarehouse indicates an expected call of UpdateWarehouse.
func (mr *MockPostgresRepositoryMockRecorder) UpdateWarehouse(ctx, warehouse interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWarehouse", reflect.TypeOf((*MockPostgresRepository)(nil).UpdateWarehouse), ctx, warehouse)
}

// WriteLocation mocks base method.
func (m *MockPostgresRepository) WriteLocation(ctx context.Context, location model.Location) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteLocation", ctx, location)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteLocation indicates an expected call of WriteLocation.
func (mr *MockPostgresRepositoryMockRecorder) WriteLocation(ctx, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteLocation", reflect.TypeOf((*MockPostgresRepository)(nil).WriteLocation), ctx, location)
}

// WriteProduct mocks base method.
func (m *MockPostgresRepository) WriteProduct(arg0 context.Context, arg1 model.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteProduct", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteProduct indicates an expected call of WriteProduct.
func (mr *MockPostgresRepositoryMockRecorder) WriteProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteProduct", reflect.TypeOf((*MockPostgresRepository)(nil).WriteProduct), arg0, arg1)
}

// WriteWarehouse mocks base method.
func (m *MockPostgresRepository) WriteWarehouse(ctx context.Context, warehouse model.Warehouse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteWarehouse", ctx, warehouse)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteWarehouse indicates an expected call of WriteWarehouse.
func (mr *MockPostgresRepositoryMockRecorder) WriteWarehouse(ctx, warehouse interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteWarehouse", reflect.TypeOf((*MockPostgresRepository)(nil).WriteWarehouse), ctx, warehouse)
}
